// Generated by Dagger (https://google.github.io/dagger).
package com.android.testapp.di;

import android.app.Activity;
import android.app.Application;
import android.app.Fragment;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ContentProvider;
import androidx.lifecycle.ViewModel;
import com.android.testapp.base.BaseActivity_MembersInjector;
import com.android.testapp.base.BaseApplication;
import com.android.testapp.base.BaseFragment_MembersInjector;
import com.android.testapp.data.repository.DataRepository;
import com.android.testapp.data.repository.DataRepository_Factory;
import com.android.testapp.data.webservice.RestService;
import com.android.testapp.di.module.ActivityBindingModule_BindMainActivity;
import com.android.testapp.di.module.ApplicationModule_ProvideRetrofitFactory;
import com.android.testapp.di.module.ApplicationModule_ProvideRetrofitServiceFactory;
import com.android.testapp.di.module.fragment.MainFragmentBindingModule_ProvideHomeFragment;
import com.android.testapp.di.util.ViewModelFactory;
import com.android.testapp.ui.home.HomeFragment;
import com.android.testapp.ui.main.MainActivity;
import com.android.testapp.viewmodel.HomeViewModel;
import com.android.testapp.viewmodel.HomeViewModel_Factory;
import com.android.testapp.viewmodel.MainViewModel;
import com.android.testapp.viewmodel.MainViewModel_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerApplication;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class DaggerApplicationComponent implements ApplicationComponent {
  private Provider<ActivityBindingModule_BindMainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<RestService> provideRetrofitServiceProvider;

  private Provider<DataRepository> dataRepositoryProvider;

  private DaggerApplicationComponent(Builder builder) {

    initialize(builder);
  }

  public static ApplicationComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(
        MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<BroadcastReceiver>
      getDispatchingAndroidInjectorOfBroadcastReceiver() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<ContentProvider>
      getDispatchingAndroidInjectorOfContentProvider() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<androidx.fragment.app.Fragment>
      getDispatchingAndroidInjectorOfFragment2() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<ActivityBindingModule_BindMainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivityBindingModule_BindMainActivity.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.provideRetrofitProvider =
        DoubleCheck.provider(ApplicationModule_ProvideRetrofitFactory.create());
    this.provideRetrofitServiceProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideRetrofitServiceFactory.create(provideRetrofitProvider));
    this.dataRepositoryProvider =
        DoubleCheck.provider(DataRepository_Factory.create(provideRetrofitServiceProvider));
  }

  @Override
  public void inject(DaggerApplication arg0) {
    injectDaggerApplication(arg0);
  }

  @Override
  public void inject(BaseApplication app) {
    injectBaseApplication(app);
  }

  private DaggerApplication injectDaggerApplication(DaggerApplication instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    dagger.android.support.DaggerApplication_MembersInjector.injectSupportFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment2());
    return instance;
  }

  private BaseApplication injectBaseApplication(BaseApplication instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    dagger.android.support.DaggerApplication_MembersInjector.injectSupportFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment2());
    return instance;
  }

  private static final class Builder implements ApplicationComponent.Builder {
    private Application application;

    @Override
    public ApplicationComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerApplicationComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivityBindingModule_BindMainActivity.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public ActivityBindingModule_BindMainActivity.MainActivitySubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, MainActivity.class);
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivityBindingModule_BindMainActivity.MainActivitySubcomponent {
    private Provider<MainFragmentBindingModule_ProvideHomeFragment.HomeFragmentSubcomponent.Builder>
        homeFragmentSubcomponentBuilderProvider;

    private HomeViewModel_Factory homeViewModelProvider;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {

      initialize(builder);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(2)
          .put(
              MainActivity.class,
              (Provider) DaggerApplicationComponent.this.mainActivitySubcomponentBuilderProvider)
          .put(HomeFragment.class, (Provider) homeFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<androidx.fragment.app.Fragment>
        getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment2() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>>
        getMapOfClassOfAndProviderOfViewModel() {
      return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
          .put(MainViewModel.class, (Provider) MainViewModel_Factory.create())
          .put(HomeViewModel.class, (Provider) homeViewModelProvider)
          .build();
    }

    private ViewModelFactory getViewModelFactory() {
      return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.homeFragmentSubcomponentBuilderProvider =
          new Provider<
              MainFragmentBindingModule_ProvideHomeFragment.HomeFragmentSubcomponent.Builder>() {
            @Override
            public MainFragmentBindingModule_ProvideHomeFragment.HomeFragmentSubcomponent.Builder
                get() {
              return new HomeFragmentSubcomponentBuilder();
            }
          };
      this.homeViewModelProvider =
          HomeViewModel_Factory.create(DaggerApplicationComponent.this.dataRepositoryProvider);
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment2());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
      return instance;
    }

    private final class HomeFragmentSubcomponentBuilder
        extends MainFragmentBindingModule_ProvideHomeFragment.HomeFragmentSubcomponent.Builder {
      private HomeFragment seedInstance;

      @Override
      public MainFragmentBindingModule_ProvideHomeFragment.HomeFragmentSubcomponent build() {
        Preconditions.checkBuilderRequirement(seedInstance, HomeFragment.class);
        return new HomeFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(HomeFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class HomeFragmentSubcomponentImpl
        implements MainFragmentBindingModule_ProvideHomeFragment.HomeFragmentSubcomponent {
      private HomeFragmentSubcomponentImpl(HomeFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(HomeFragment arg0) {
        injectHomeFragment(arg0);
      }

      private HomeFragment injectHomeFragment(HomeFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(
            instance, MainActivitySubcomponentImpl.this.getViewModelFactory());
        return instance;
      }
    }
  }
}
