// Generated by Dagger (https://google.github.io/dagger).
package com.android.testapp.di.module;

import com.android.testapp.data.webservice.RestService;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class ApplicationModule_Companion_ProvideRetrofitServiceFactory
    implements Factory<RestService> {
  private final ApplicationModule.Companion module;

  private final Provider<Retrofit> retrofitProvider;

  public ApplicationModule_Companion_ProvideRetrofitServiceFactory(
      ApplicationModule.Companion module, Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public RestService get() {
    return provideInstance(module, retrofitProvider);
  }

  public static RestService provideInstance(
      ApplicationModule.Companion module, Provider<Retrofit> retrofitProvider) {
    return proxyProvideRetrofitService(module, retrofitProvider.get());
  }

  public static ApplicationModule_Companion_ProvideRetrofitServiceFactory create(
      ApplicationModule.Companion module, Provider<Retrofit> retrofitProvider) {
    return new ApplicationModule_Companion_ProvideRetrofitServiceFactory(module, retrofitProvider);
  }

  public static RestService proxyProvideRetrofitService(
      ApplicationModule.Companion instance, Retrofit retrofit) {
    return Preconditions.checkNotNull(
        instance.provideRetrofitService(retrofit),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
